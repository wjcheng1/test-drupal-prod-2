import Image from "next/image";
import Link from "next/link";
import { NextSeo } from "next-seo";
import absoluteUrl from "next-absolute-url";
import { DrupalState } from "@pantheon-systems/drupal-kit";
import { isMultiLanguage } from "../../lib/isMultiLanguage";
import Layout from "../../components/layout";

const drupalUrl = process.env.backendUrl;
export default function SSRArticlesList({ articles, hrefLang }) {
  return (
    <Layout>
      <NextSeo
        title="Decoupled Next Drupal Demo"
        description="Generated by create next app."
        languageAlternates={hrefLang || false}
      />
      <header className="prose text-2xl mx-auto mt-20">
        <h1 className="text-center mx-auto">Articles</h1>
      </header>
      {/* Check to see if this is an object before mapping */}
      {articles ? (
        <div className="mt-12 grid gap-5 max-w-lg mx-auto lg:grid-cols-3 lg:max-w-screen-lg">
          {articles?.map((article) => {
            const imgSrc =
              article.field_media_image?.field_media_image?.uri?.url || "";
            return (
              <Link
                passHref
                href={`/${article.path.langcode}${article.path.alias}`}
                key={article.id}
              >
                <div className="flex flex-col rounded-lg shadow-lg overflow-hidden cursor-pointer border-2 hover:border-indigo-500">
                  <div className="flex-shrink-0 relative h-40">
                    {imgSrc !== "" ? (
                      <Image
                        src={drupalUrl + imgSrc}
                        layout="fill"
                        objectFit="cover"
                        alt={
                          article.field_media_image?.field_media_image
                            ?.resourceIdObjMeta.alt
                        }
                      />
                    ) : (
                      <div className="bg-black">
                        <Image
                          src="/pantheon.svg"
                          alt="Pantheon Logo"
                          width={324}
                          height={160}
                        />
                      </div>
                    )}
                  </div>
                  <h2 className="my-4 mx-6 text-xl leading-7 font-semibold text-gray-900">
                    {article.title} &rarr;
                  </h2>
                </div>
              </Link>
            );
          })}
        </div>
      ) : (
        <h2 className="text-xl text-center mt-14">No articles found üèú</h2>
      )}
    </Layout>
  );
}

export async function getServerSideProps(context) {
  try {
    const { origin } = absoluteUrl(context.req);
    const { locales } = context;
    const multiLanguage = isMultiLanguage(locales);

    const hrefLang = locales.map((locale) => {
      return {
        hrefLang: locale,
        href: origin + "/" + locale,
      };
    });

    // TODO - determine apiRoot from environment variables
    const store = new DrupalState({
      apiBase: drupalUrl,
      defaultLocale: multiLanguage ? context.locale : "",
    });

    store.params.addInclude(["field_media_image.field_media_image"]);
    const articles = await store.getObject({
      objectName: "node--article",
      res: context.res,
    });

    if (!articles) {
      throw new Error(
        "No articles returned. Make sure the objectName and store.params are valid!"
      );
    }

    // The calls below are unnecessary for rendering the page, but demonstrates
    // both that surrogate keys are de-duped when added to the response, and also
    // that they are bubbled up for GraphQL link queries.

    // A duplicate resource to ensure that keys are de-duped.
    await store.getObject({
      objectName: "node--article",
      id: articles[0].id,
      query: `{
        id
        title
      }`,
      res: context.res,
    });
    store.params.clear();

    // A new resource to ensure that keys are bubbled up.
    await store.getObject({
      objectName: "node--page",
      query: `{
        id
        title
      }`,
      res: context.res,
    });

    return {
      props: {
        articles,
        hrefLang,
      },
    };
  } catch (error) {
    console.error("Unable to fetch articles: ", error);
    return {
      props: {},
    };
  }
}
